Q. 3) Fetch data from the JSON placeholder API and display it in the browser. Also, implement the skeleton loader which will be displayed when the data is getting fetched. (No library should be used for implementing the skeleton loader).
Ans- Html code:-
<!DOCTYPE html>
<html>
<head>
  <title>Data Fetching with Skeleton Loader</title>
  <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
  <div id="loader"></div>
  <div id="data-container"></div>
  <script src="script.js"></script>
</body>
</html>

Css code-
#loader {
  width: 100%;
  height: 300px;
  background-color: #eee;
  animation: loaderAnim 1s infinite alternate;
}

@keyframes loaderAnim {
  0% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}

#data-container {
  margin-top: 20px;
}

javascript code:-

document.addEventListener('DOMContentLoaded', function() {
  const loader = document.getElementById('loader');
  const dataContainer = document.getElementById('data-container');

  // Display the skeleton loader
  showLoader();

  // Fetch data from the API
  fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(data => {
      // Hide the skeleton loader
      hideLoader();

      // Process the fetched data
      processData(data);
    })
    .catch(error => {
      // Handle any error that occurs during the fetch
      console.log('Error:', error);
      hideLoader();
    });

  // Function to display the skeleton loader
  function showLoader() {
    loader.style.display = 'block';
  }

  // Function to hide the skeleton loader
  function hideLoader() {
    loader.style.display = 'none';
  }

  // Function to process and display the fetched data
  function processData(data) {
    data.forEach(item => {
      const div = document.createElement('div');
      div.textContent = item.title;
      dataContainer.appendChild(div);
    });
  }
});
